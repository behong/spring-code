buildscript {
    ext {
        kotlinVersion = '1.3.21'
        springBootVersion = '2.1.2.RELEASE'
        queryDslVersion = '4.2.1'
        mapstruct = '1.3.0.Final'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

plugins {
    id "org.asciidoctor.convert" version "1.5.9.2"
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'

apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply plugin: 'kotlin-kapt'
apply plugin: 'idea'

idea {
    module {
        def kaptMain = file('build/generated/source/kapt/main')
        sourceDirs += kaptMain
        generatedSourceDirs += kaptMain
    }
}

asciidoctor {
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}


group = 'me.daniel'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
repositories {
    mavenCentral()
}

allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
}

test {
    useJUnitPlatform()
}


dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")

    // querydsl
    implementation("com.querydsl:querydsl-jpa:${queryDslVersion}")
    // querydsl Annotation Processor
    kapt("com.querydsl:querydsl-apt:${queryDslVersion}:jpa")

    // map-struct
    implementation("org.mapstruct:mapstruct:${mapstruct}")
    // map-struct Annotation Processor
    kapt("org.mapstruct:mapstruct-processor:${mapstruct}")
    kaptTest("org.mapstruct:mapstruct-processor:${mapstruct}")

    runtimeOnly('com.h2database:h2')
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
    }
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.2.0')
    testCompile('org.junit.jupiter:junit-jupiter-params:5.2.0')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0')

    // rest-docs
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc:2.0.3.RELEASE')
}

//apply from: "./${rootDir}/task.gradle"
task deployDocs {
    group 'deploy'
    doLast {
        exec { commandLine "./gradlew clean".split(' ') }
        exec { commandLine "./gradlew asciidoctor".split(' ') }
        exec { commandLine "aws s3 ls".split(' ') }
        // aws cloudfront create-invalidation --distribution-id $CDN_DISTRIBUTION_ID --paths "/*"
        exec { commandLine "aws s3 sync ./build/asciidoc/html5 s3://[BUCKET_NAME]".split(' ') }
    }
}